@using System.Diagnostics
@using TypingFast.Models
@using TypingFast.Services
@inject IJSRuntime Js
@* TODO: remove after testing *@

@if (IsDebug)
{
    <h2> App Status: @_test.Status </h2>
    <h2> is last
        word: @_test.CurrentIndex @_test.GetWords().Length-> @(_test.CurrentIndex == _test.GetWords().Length) </h2>
}

<div class="d-flex flex-column gap-2  justify-content-cent">
    <WordDisplay Test="@_test"/>

    <div class="d-inline-block">
        <input type="text"
               id="test-input"
               value="@CurrentInput"
               class="input @(_test.InputError ? "bg-danger-subtle" : "")"
               @oninput="HandleInput"/>

        <button @onclick="NewTest" class="btn btn-primary">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-repeat"
                 viewBox="0 0 16 16">
                <path
                    d="M11 5.466V4H5a4 4 0 0 0-3.584 5.777.5.5 0 1 1-.896.446A5 5 0 0 1 5 3h6V1.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384l-2.36 1.966a.25.25 0 0 1-.41-.192m3.81.086a.5.5 0 0 1 .67.225A5 5 0 0 1 11 13H5v1.466a.25.25 0 0 1-.41.192l-2.36-1.966a.25.25 0 0 1 0-.384l2.36-1.966a.25.25 0 0 1 .41.192V12h6a4 4 0 0 0 3.585-5.777.5.5 0 0 1 .225-.67Z"/>
            </svg>
        </button>
    </div>
    <div>
        @CurrentInput
    </div>
</div>

@code{

    private TypingTest _test = new(new WordsService());
    private IJSObjectReference? _module;
    private string CurrentInput { get; set; } = "";

    private void NewTest()
    {
        _test.Restart();
        CurrentInput = "";
        _ = FocusInput();
    }

    private async Task FocusInput()
    {
        if (_module != null) await _module.InvokeVoidAsync("focusInput");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await Js.InvokeAsync<IJSObjectReference>("import", "./Components/TypingTestComponent.razor.js");

            await FocusInput();
        }
    }


    private void HandleInput(ChangeEventArgs obj)
    {
        CurrentInput = obj.Value?.ToString() ?? "";
        if (CurrentInput.Length == 0)
        {
            return;
        }
        if (CurrentInput[CurrentInput.Length - 1] == ' ')
        {
            _test.ConsumeWord(CurrentInput.Substring(0, CurrentInput.Length - 1));
            CurrentInput = "";
        }
        else
        {
            _test.CheckWord(CurrentInput, _test.GetWords().Length - 1 == _test.CurrentIndex);
        }

        if (_test.Status == TypingTestStatus.Finished)
        {
            CurrentInput = "";
        }
    }

    private bool IsDebug
    {
        get
        {
#if DEBUG
            return true;
#else
            return false;
#endif
        }
    }

}
